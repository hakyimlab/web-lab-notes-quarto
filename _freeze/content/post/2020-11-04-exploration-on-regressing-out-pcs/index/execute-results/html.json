{
  "hash": "86f61750cf20771d54551f1e835496cc",
  "result": {
    "markdown": "---\ntitle: Exploration on regressing out PCs\nauthor: 'Yanyu Liang'\ndate: '2020-11-04'\nslug: exploration-on-regressing-out-pcs\ncategories: []\ntags: []\ndescription: 'Some going-to-nowhere exploration on regressing out PCA'\ntopics: []\n---\n\n\n$$\\newcommand{\\var}{\\text{Var}}\n\\newcommand{\\E}{\\text{E}}\n\\newcommand{\\diag}{\\text{diag}}\n\\newcommand{\\cov}{\\text{Cov}}$$\n\n# About\n\nRecently, we encountered a data matrix with correlated columns. To account for this, we thought about performing SVD on the matrix and then regressing out the left singular vectors from the columns (or equivalently regressing out the right singular vectors from the rows).\n\nIt turns out that we could removing a lot of correlation after regressing out top N PCs (which captures about 50% PVE). But the issue is that this approach is not removing all of the correlations. There are some left over correlations that cannot be removed by PCA (in our case we ended up having block wise diagonal correlation).\n\nAnd if we focus on the block of features that have remaining correlation and perform PCA for them, we cannot furthre remove any correlation anymore.\n\nNow that the question is why PCA works at first but fails afterwards. And more specifically, we want to know with what data pattern/characteristic, the PCA approach works and when it could not work out.\n\nHere, I do a very simple exploration on this problem. The arguments to deliver are the following:\n\n-   When regressing out PCs removes the correlation structure, it captures the common factors shared by almost all features.\n-   When the features do not share common factor, this approach could fail.\n\nHere we do a super simple simulation. Suppose we have $K = 16$ hidden factors $z_1, \\cdots, z_K$. The factor sharing pattern is governed by a structure matrix $S$. For each feature $x_{ij} = \\sum_k S_{kj} z_{ik}$ and the data matrix is formed by $X = Z S$ and we let $z_{ik} \\sim N(0, 1)$. Here we impose two types of $S$ and, in both cases, try to regress out the first PC from the data matrix $X = Z S$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2020)\nstandardize = function(x) {\n  apply(x, 2, function(y) { (y - mean(y)) / sd(y) })\n}\nsplit_by_pca = function(x, pve_cutoff = 0.5, npc = NULL) {\n  x = standardize(x)\n  res = svd(x)\n  v = res$v\n  if(is.null(npc)) {\n    pve = cumsum(res$d^2 / sum(res$d^2))\n    npc = sum(pve <= pve_cutoff) + 1\n  }\n  pc_mat = res$u[, 1 : npc, drop = F]\n  res = x - pc_mat %*% (t(pc_mat) %*% x)\n  list(residual = res, pc = pc_mat, v = v)\n}\nk = 16\nn = 1000\nstruct_mat = matrix(0, nrow = k, ncol = k)\nfor(j in 1 : k) {\n  struct_mat[j, j] = 1\n  if(j < k) {\n    struct_mat[j, j + 1] = 1\n  }\n  if(j > 1) {\n    struct_mat[j - 1, j] = 1\n  }\n}\nstruct_mat2 = matrix(0, nrow = k, ncol = k)\nstruct_mat2[4 : 10, 1] = 1\nstruct_mat2[1:3, 2] = 1\nstruct_mat2[11:k, 3] = 1\nfor(j in 1 : k) {\n  struct_mat2[j, j] = 1\n}\nzz = matrix(rnorm(n * k), nrow = n)\nx = zz %*% t(struct_mat) \nx2 = zz %*% t(struct_mat2) \ntmp = split_by_pca(x, npc = 1)\nres = tmp$residual\npar(mfrow=c(2,3))\nimage(struct_mat, main = 'Structure matrix')\nimage(cor(x), main = 'Correlation in X matrix')\nfor(k in 1 : 4) {\n  tmp = split_by_pca(x, npc = k)\n  res = tmp$residual\n  image(cor(res), main = paste0('Correlation in residual matrix, nPC = ', k))\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=768}\n:::\n\n```{.r .cell-code}\npar(mfrow=c(2,3))\nimage(struct_mat2, main = 'Structure matrix')\nimage(cor(x2), main = 'Correlation in X matrix')\nfor(k in 1 : 4) {\n  tmp2 = split_by_pca(x2, npc = k)\n  res2 = tmp2$residual\n  image(cor(res2), main = paste0('Correlation in residual matrix, nPC = ', k))\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=768}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}