{
  "hash": "2ec0c2b6349e42825b9e4e49bb587983",
  "result": {
    "markdown": "---\ntitle: query alpha-missense \ndate: 2023-10-23\nauthor: Haky Im\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(glue))\n\nPRE = \"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\nSLUG=\"query-alpha-missense\" ## copy the slug from the header\nbDATE='2023-10-23' ## copy the date from the blog's header here\nDATA = glue(\"{PRE}/{bDATE}-{SLUG}\")\nif(!file.exists(DATA)) system(glue::glue(\"mkdir {DATA}\"))\nWORK=DATA\n##system(glue(\"open {DATA}\")) ## this will open the folder \n```\n:::\n\n\n\n### 1. Create an SQLite Database\n\nFirst, ensure SQLite3 is installed. If it's not, you can install it using Homebrew on macOS:\n\n```bash\nbrew install sqlite3\n```\n\nNow, let's create an SQLite database from the TSV file:\n\n```bash\n## this needs uncompressed file\nsqlite3 AlphaMissense.db <<EOF\nCREATE TABLE mutations (uniprot_id TEXT, protein_variant TEXT, am_pathogenicity REAL, am_class TEXT);\n.mode tabs\n.import AlphaMissense_aa_substitutions.tsv.gz mutations\nEOF\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##install.packages(\"readr\")\nlibrary(RSQLite)\nlibrary(readr)\n\n# Connect to the SQLite database\ncon <- dbConnect(SQLite(), glue(\"{DATA}/test-alpha-missense-query/AlphaMissense.db\"))\n\n# Read the gzipped TSV file\n# data <- read_tsv(glue(\"{DATA}/AlphaMissense_aa_substitutions.tsv.gz\"),skip=3)\n# head(data)\n\n# Write the data into the SQLite database\n# tic=Sys.time()\n# dbWriteTable(con, \"mutations\", data)\n# toc=Sys.time()\n# print(toc-tic)\n\n\ndbExecute(con, \"VACUUM\")\n\n\n# Close the connection\ndbDisconnect(con)\n```\n:::\n\n\n\nNote: The provided command assumes that the TSV file doesn't contain header lines. If it does, you should create a version of the TSV file without them, or delete the imported header row from the SQLite table afterwards.\n\n### 2. Create a Shiny App\n\nMake sure you have R, Shiny, and the required packages installed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"shiny\")\ninstall.packages(\"RSQLite\")\ninstall.packages(\"DT\")\n```\n:::\n\n\nHere's a simple Shiny app:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(RSQLite)\nlibrary(DT)\n\n# Connect to the SQLite database\ncon <- dbConnect(SQLite(), \"AlphaMissense.db\")\n\nui <- fluidPage(\n    titlePanel(\"AlphaMissense Query\"),\n    \n    sidebarLayout(\n        sidebarPanel(\n            textInput(\"uniprot_id\", \"UniProt ID\", \"\"),\n            textInput(\"protein_variant\", \"Protein Variant\", \"\"),\n            actionButton(\"query_button\", \"Query\")\n        ),\n        \n        mainPanel(\n            DTOutput(\"results_table\")\n        )\n    )\n)\n\nserver <- function(input, output) {\n    \n    observeEvent(input$query_button, {\n        query <- \"SELECT * FROM mutations WHERE 1=1 \"\n        \n        if (input$uniprot_id != \"\") {\n            query <- paste0(query, \"AND uniprot_id = '\", input$uniprot_id, \"' \")\n        }\n        \n        if (input$protein_variant != \"\") {\n            query <- paste0(query, \"AND protein_variant = '\", input$protein_variant, \"'\")\n        }\n        \n        results <- dbGetQuery(con, query)\n        output$results_table <- renderDT({results})\n    })\n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nThis app provides two input fields: one for the `uniprot_id` and another for the `protein_variant`. If the user fills out the `uniprot_id` and clicks \"Query\", all matching mutations for that UniProt ID will be displayed. If they also provide a protein variant, the app will display only the matching mutation.\n\nTo run this app, save the code into a file, say `app.R`, then from the R console (or RStudio), navigate to the directory containing both the SQLite database (`AlphaMissense.db`) and the app (`app.R`), and run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nrunApp(glue(\"{DATA}/app.R\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"bigrquery\")\nlibrary(bigrquery)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrunApp(glue(\"~/Downloads/alphamissense-query/app.R\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nrunApp(glue(\"~/Downloads/alphamissense-query-hugo/app.R\"))\n```\n:::\n\n\n\n\nThe error suggests that the deployed Shiny app is not able to authenticate with Google BigQuery because it does not have the required credentials. When you run the Shiny app locally on your machine, it might be using your personal Google credentials. However, when the app is deployed on `shinyapps.io`, it does not have access to these credentials.\n\nTo resolve this:\n\n1. **Service Account**: \n   - You'll need to create a service account in the Google Cloud Console that has access to the BigQuery dataset.\n   - Download the JSON key for this service account.\n\n2. **Include Service Account in Shiny App**:\n   - Save the JSON key in the same directory as your Shiny app.\n   - In your Shiny app, before making any BigQuery calls, authenticate using this service account.\n\n   ```R\n   library(bigrquery)\n   \n   # Authenticate using Service Account\n   bq_auth(path = \"path_to_service_account.json\")\n   ```\n\n3. **Deploy the Shiny App**:\n   - Make sure you deploy both the Shiny app files (`app.R`, etc.) and the service account JSON key to `shinyapps.io`.\n\n4. **Permissions**:\n   - Ensure the service account has the necessary permissions on BigQuery to read the data.\n\n5. **Billing**:\n   - If your Google Cloud Project uses billing (as BigQuery is a paid service), make sure the service account has permissions to incur charges.\n\n6. **Avoid Hardcoding Paths**:\n   - Instead of hardcoding the path to the service account file, you might want to use a more dynamic approach, for instance:\n\n   ```R\n   # Authenticate using Service Account\n   service_account_path <- Sys.getenv(\"SERVICE_ACCOUNT_PATH\", \"default_service_account.json\")\n   bq_auth(path = service_account_path)\n   ```\n\n   You can then set the `SERVICE_ACCOUNT_PATH` environment variable appropriately, either locally or on `shinyapps.io`.\n\nAfter making these adjustments, try redeploying your Shiny app.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(biomaRt)\n# Choose the ENSEMBL mart and dataset for human genes\nensembl <- useMart(\"ensembl\", dataset=\"hsapiens_gene_ensembl\")\n\n# Fetch the required attributes: HUGO name and UniProt ID\nmapping <- getBM(attributes=c('hgnc_symbol', 'uniprotswissprot'), mart=ensembl)\n\n# Filter out entries with empty UniProt IDs or HUGO names\nmapping <- mapping[mapping$hgnc_symbol != '' & mapping$uniprotswissprot != '', ]\n\nwrite.csv(mapping, \"hugo_to_uniprot_mapping.csv\", row.names=FALSE)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}