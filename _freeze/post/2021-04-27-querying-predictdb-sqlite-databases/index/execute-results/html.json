{
  "hash": "5559d7b1213f1ed9dbe85a03212b6e5e",
  "result": {
    "markdown": "---\ntitle: Querying PredictDB sqlite databases\nauthor: Haky Im\ndate: '2021-04-27'\nslug: querying-predictdb-sqlite-databases\ncategories:\n  - how_to\ntags: []\n---\n\n\nPredictDB databases are stored in simple sqlite files. You can programmatically query them via python, R, perl, etc (using appropriate libraries). Below is an example on how to query the database in R.\n\n\nEach has two tables the extra and the weights tables. \n- extra table contains the list of available genes and some prediction performance information (for elastic net, not for the mashr models), \n- weights table contains the weights for predicting the gene expression levels (or other mediating/molecular traits)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## install.packages(\"RSQLite\")\nlibrary(\"RSQLite\")\nsqlite <- dbDriver(\"SQLite\")\ndbname <- \"assets/en_Adipose_Subcutaneous.db\" ## add full path if db file not in current directory\n## connect to db\ndb = dbConnect(sqlite,dbname)\n## list tables\ndbListTables(db)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"extra\"   \"weights\"\n```\n:::\n\n```{.r .cell-code}\ndbListFields(db, \"weights\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gene\"       \"rsid\"       \"varID\"      \"ref_allele\" \"eff_allele\"\n[6] \"weight\"    \n```\n:::\n\n```{.r .cell-code}\ndbListFields(db, \"extra\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"gene\"                  \"genename\"              \"gene_type\"            \n [4] \"alpha\"                 \"n_snps_in_window\"      \"n.snps.in.model\"      \n [7] \"test_R2_avg\"           \"test_R2_sd\"            \"cv_R2_avg\"            \n[10] \"cv_R2_sd\"              \"in_sample_R2\"          \"nested_cv_fisher_pval\"\n[13] \"nested_cv_converged\"   \"rho_avg\"               \"rho_se\"               \n[16] \"rho_zscore\"            \"pred.perf.R2\"          \"pred.perf.pval\"       \n[19] \"pred.perf.qval\"       \n```\n:::\n\n```{.r .cell-code}\n## convenience query function\nquery <- function(...) dbGetQuery(db, ...)\n## example queries\nquery('select count(*) from weights')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  count(*)\n1   249965\n```\n:::\n\n```{.r .cell-code}\nquery('select * from weights where gene = \"GATA6\" ')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] gene       rsid       varID      ref_allele eff_allele weight    \n<0 rows> (or 0-length row.names)\n```\n:::\n\n```{.r .cell-code}\nquery('select * from weights limit 10')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                gene       rsid                varID ref_allele eff_allele\n1  ENSG00000261456.5 rs11252127  chr10_52147_C_T_b38          C          T\n2  ENSG00000261456.5 rs11252546  chr10_58487_T_C_b38          T          C\n3  ENSG00000261456.5 rs11591988  chr10_80130_C_T_b38          C          T\n4  ENSG00000261456.5  rs4495823  chr10_97603_G_A_b38          G          A\n5  ENSG00000261456.5 rs11253478  chr10_98907_C_T_b38          C          T\n6  ENSG00000261456.5  rs7901397 chr10_102757_T_C_b38          T          C\n7  ENSG00000261456.5  rs7476951 chr10_137211_T_C_b38          T          C\n8  ENSG00000261456.5  rs3123247 chr10_264285_C_T_b38          C          T\n9  ENSG00000261456.5  rs4880567 chr10_267364_T_C_b38          T          C\n10 ENSG00000261456.5  rs4881392 chr10_519179_A_G_b38          A          G\n         weight\n1   0.052252706\n2  -0.033544959\n3   0.014296499\n4  -0.030826218\n5   0.013036311\n6  -0.118567569\n7   0.007865262\n8   0.004556608\n9   0.030123310\n10  0.057842737\n```\n:::\n\n```{.r .cell-code}\n## how many genes are available for given tissue?\n## dbname should be the name of the sqlite database for the tissue\nquery('select count(*) from extra')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  count(*)\n1     8650\n```\n:::\n\n```{.r .cell-code}\n## select genes with R2>0.01 (this is cor>0.1)\n## ths won't work for the latest MASHR-based GTEx V8 models\n## this only works for models where R2 is included. \n#high.h2.genes <- query('select * from extra where R2 > 0.01')\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}