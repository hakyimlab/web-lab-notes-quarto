{
  "hash": "7162f77b84c1ab2c7a1f6d1ff341f233",
  "result": {
    "markdown": "---\ntitle: \"Inflation Brainxcan\"\nauthor: \"Haky Im\"\ndate: \"2023-04-07\"\ncategories: [analysis]\neditor_options: \n  chunk_output_type: console\n---\n\n\nSummary:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(glue))\n\nPRE = \"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\nSLUG=\"inflation-brainxcan\" ## copy the slug from the header\nbDATE='2023-04-07' ## copy the date from the blog's header here\nDATA = glue(\"{PRE}/{bDATE}-{SLUG}\")\nif(!file.exists(DATA)) system(glue::glue(\"mkdir {DATA}\"))\nWORK=DATA\n##system(glue(\"open {DATA}\")) ## this will open the folder \n```\n:::\n\n\n-   [ ] simulate Xk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnsam = 10000\nnsim = 100\nmsnp = 1000\n\nXmat = matrix(rbinom(nsam*msnp, 2, 0.4), nsam, msnp)\n```\n:::\n\n\n-   [ ] simulate polygenic model: Y and IDP (nsam x nsim)\n\n\n```{=tex}\n\\begin{align}\nY &= \\beta \\cdot \\text{IDP} + \\sum_k X_k \\cdot b_k + \\epsilon \\\\\n\\text{IDP} &= \\sum_k \\gamma_k \\cdot X_k + \\epsilon',\n\\end{align}\n```\n\n::: {.cell}\n\n```{.r .cell-code}\n## betamat msnp x 1 \nbetamat = matrix(rnorm(msnp),msnp, 1)\nepsimat = matrix(rnorm(nsam),nsam, 1)\ngYmat = Xmat %*% betamat\nYmat = gYmat + epsimat\n## Ymat = scale(Ymat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngammamat = matrix(rnorm(msnp * nsim),msnp, nsim)\nepsimat2 = matrix(rnorm(nsam * nsim),nsam, nsim)\ngIDPmat = Xmat %*% gammamat\nIDPmat = gIDPmat + epsimat2\n```\n:::\n\n\n-   [ ] calculate pvec of Y \\~ IDP\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ## load fast lm\n# devtools::source_gist(\"5d2251ea1a86009499e4ffdf47fe2735\")\n\n## load fn_ratxcan: 115403f16bec0a0e871f3616d552ce9b\ndevtools::source_gist(\"115403f16bec0a0e871f3616d552ce9b\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Sourcing gist \"115403f16bec0a0e871f3616d552ce9b\"\nℹ SHA-1 hash of file is \"06f294311936f3783e4d652bac96a59da93a765e\"\n```\n:::\n\n```{.r .cell-code}\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Sourcing gist \"38431b74c6c0bf90c12f\"\nℹ SHA-1 hash of file is \"cbeca7fd9bf1602dee41c4f1880cc3a5e8992303\"\n```\n:::\n\n```{.r .cell-code}\n## run fast_predixcan_assoc\nidnum=1:nsam\nidvec = glue(\"id-{idnum}\")\nres <- fast_predixcan_assoc(data.frame(IID=idvec,IDPmat), data.frame(IID=idvec,Ymat), idlist=idvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10000   100\n[1] 10000     1\nA sample size of 10000 was used\n```\n:::\n\n```{.r .cell-code}\nqqunif(res$pval)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fit Y on IDP-1.png){width=672}\n:::\n:::\n\n\n-   [ ] calculate pvec of cor(Y, IDP): this is the same as running linear regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# > summary(lm(Ymat~ IDPmat[,32]))\n# \n# Call:\n# lm(formula = Ymat ~ IDPmat[, 32])\n# \n# Residuals:\n#      Min       1Q   Median       3Q      Max \n# -201.069  -46.406   -0.164   46.472  205.379 \n# \n# Coefficients:\n#               Estimate Std. Error t value Pr(>|t|)    \n# (Intercept)  -37.14480    4.61728  -8.045 2.44e-15 ***\n# IDPmat[, 32]  -0.08780    0.03051  -2.878  0.00409 ** \n# ---\n# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n# \n# Residual standard error: 68.63 on 998 degrees of freedom\n# Multiple R-squared:  0.008231,\tAdjusted R-squared:  0.007237 \n# F-statistic: 8.282 on 1 and 998 DF,  p-value: 0.004088\n# \n# > cor.test(Ymat, IDPmat[,32])\n# \n# \tPearson's product-moment correlation\n# \n# data:  Ymat and IDPmat[, 32]\n# t = -2.8779, df = 998, p-value = 0.004088\n# alternative hypothesis: true correlation is not equal to 0\n# 95 percent confidence interval:\n#  -0.15186241 -0.02889285\n# sample estimates:\n#         cor \n# -0.09072344 \n```\n:::\n\n\n-   [ ] calculate pvec of cor(sum bk Xk, sum gammak Xk)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## run fast_predixcan_assoc\nidnum=1:nsam\nidvec = glue(\"id-{idnum}\")\ngres <- fast_predixcan_assoc(data.frame(IID=idvec,gIDPmat), data.frame(IID=idvec,gYmat), idlist=idvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10000   100\n[1] 10000     1\nA sample size of 10000 was used\n```\n:::\n\n```{.r .cell-code}\nqqunif(gres$pval)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fit gY on gIDP-1.png){width=672}\n:::\n:::\n\n\n-   [ ] check FDR of BrainXcan schizophrenia associations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## google sheets prepared by Yanyu for revision 4/7/2023\ns2 <- read_csv(glue(\"{DATA}/Table_S2.xlsx - ..csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 459 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): IDP, modality, subtype, pc1_name, region, side, measurement_type, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ns8 <- read_csv(glue(\"{DATA}/Table_S8-w-factor.xlsx - Table_S8-w-factor.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 16380 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): model, IDP, phenotype\ndbl (7): bhat, pval, zscore, nsnp_used, nsnp_total, z_adj_perm_null, pval_ad...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntempo <- s8 %>% left_join(s2 %>% select(IDP,modality,notes,subtype),by=c(\"IDP\")) %>% filter(model==\"ridge\",phenotype==\"SCZ_PGC_2020\") %>% filter(substr(subtype, 1, 2) != 'w-' | is.na(subtype) ) %>% filter(!grepl(\"ProbTrack-1\",IDP))\n\n## qq <- tempo %>% filter(modality==\"dMRI\") %>% .[[\"pval_adj_perm_null\"]] %>% qvalue::qvalue()\n\nqq <- tempo  %>% .[[\"pval_adj_perm_null\"]] %>% qvalue::qvalue()\n```\n:::\n\n\n-   [ ] read hapmap file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# if (!require(\"BiocManager\", quietly = TRUE))\n#     install.packages(\"BiocManager\")\n# BiocManager::install(\"snpStats\")\nsuppressMessages(library(snpStats))\n# Set the path to the binary files (without file extensions)\nplink_file_path <- \"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/Reference-Data/GWAS-tutorial-Marees/data_1_QC_GWAS/HapMap_3_r3_1\"\n# Read the binary files into an object of class \"snpMatrix\"\nsnp_matrix <- read.plink(plink_file_path)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}