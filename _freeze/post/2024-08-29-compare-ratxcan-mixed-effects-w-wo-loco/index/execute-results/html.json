{
  "hash": "b891838ee031603f2294c0d3a2d3cf46",
  "result": {
    "markdown": "---\ntitle: compare ratxcan with and without loco\ndate: 2024-08-29\nauthor: Haky Im\neditor_options: \n  chunk_output_type: console\ndescription: compare ratxcan mixed effects with and without loco\n---\n\n\n\n## load libraries and functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#options(error=recover)\n#options(error=browser)\noptions(error=NULL)\n\n## compare observed correlation with null correlation\nsuppressMessages(devtools::source_gist(\"a925fea01b365a8c605e\")) ## load qqR fn https://gist.github.com/hakyim/a925fea01b365a8c605e\nsuppressMessages(devtools::source_gist(\"38431b74c6c0bf90c12f\")) ## qqunif https://gist.github.com/hakyim/38431b74c6c0bf90c12f\nsuppressMessages(devtools::source_gist(\"115403f16bec0a0e871f3616d552ce9b\")) ## source ratxcan functions https://gist.github.com/hakyim/115403f16bec0a0e871f3616d552ce9b \n\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(glue))\nsuppressMessages(library(RSQLite))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'RSQLite' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\n#suppressMessages(library(expm))\n#suppressMessages(library(readxl))\n# install.packages(\"devtools\")\n# library(\"devtools\")\n# install_github(\"jdstorey/qvalue\")\nsuppressMessages(library(qvalue))\n# if (!require(\"BiocManager\", quietly = TRUE))\n#     install.packages(\"BiocManager\")\n# \n# BiocManager::install(\"biomaRt\")\n##suppressMessages(library(biomaRt))\n##install.packages(\"ggrepel\")\nsuppressMessages(library(ggrepel))\n\n\nrecalc=FALSE\n```\n:::\n\n\n## define data and software paths for R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWEBDATA=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\n\nPLINK=\"/Users/haekyungim/bin/plink_mac_20231211/plink\"\nGCTA=\"/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64\"\n\nINPUT <- glue(\"{WEBDATA}/ratxcan-tutorial\") ## this has the input data \nOUTPUT <- glue(\"{WEBDATA}/2023-11-27-ratxcan-tutorial/scratch\") ## this has the output data, intermediate results\nGENO = glue(\"{WEBDATA}/2023-11-27-ratxcan-tutorial/data/genotype/\")\n\n\nOUT_TEMPO = glue(\"{OUTPUT}/testing-2024-08-29\")\n```\n:::\n\n\n## define data and software for the terminal\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nWEBDATA=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\n\nPLINK=\"/Users/haekyungim/bin/plink_mac_20231211/plink\"\nGCTA=\"/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64\"\n  \nINPUT=$WEBDATA/ratxcan-tutorial\nOUTPUT=$WEBDATA/2023-11-27-ratxcan-tutorial/scratch\nGENO=$WEBDATA/2023-11-27-ratxcan-tutorial/data/genotype/\n\nOUT_TEMPO=$OUTPUT/testing-2024-08-29\n```\n:::\n\n\n\n## read grm matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrm_mat <- read_GRMBin(glue(\"{OUTPUT}/rat6k_autosome.grm\"))\n```\n:::\n\n\n## define myplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot <- function(tempres, post_titulo=\"\",semilla=\"\") {\n  # Create a data frame with specific columns\n  df <- data.frame(\n    p0.01_yes = apply(tempres$pmat_correct, 2, function(x) mean(x < 0.01)),\n    p0.01_no = apply(tempres$pmat_raw, 2, function(x) mean(x < 0.01)),\n    p0.05_yes = apply(tempres$pmat_correct, 2, function(x) mean(x < 0.05)),\n    p0.05_no = apply(tempres$pmat_raw, 2, function(x) mean(x < 0.05)),\n    p0.10_yes = apply(tempres$pmat_correct, 2, function(x) mean(x < 0.10)), \n    p0.10_no = apply(tempres$pmat_raw, 2, function(x) mean(x < 0.10))\n    # ... [rest of your code for creating df] ...\n  )\n\n# Pivot the data frame to long format, specifying the columns to keep\ndf_long <- pivot_longer(df, cols = starts_with(\"p\"))\n\ndf_long <- df_long %>% separate(name,into = c(\"threshold\",\"corrected\"),sep=\"_\") %>% rename(proportion=value)\n\n# Rename the name column to replace p0.xx with p<0.xx\ndf_long <- df_long %>%\n  mutate(threshold = gsub(\"p0\\\\.\", \"p<0.\", threshold))\n\n  # Create boxplots with mean\n  pp <- ggplot(df_long, aes(x = threshold, y = proportion, fill = corrected)) +\n    geom_boxplot(alpha = 0.6) +\n    stat_summary(fun = mean, geom = \"point\", shape = 3, size = 2, stroke = 2, color = \"blue\",                  #position = position_dodge(width = 0.8)) +\n                 position = position_dodge(width = -0.1)) +\n    #stat_summary(fun = mean, geom = \"crossbar\",  size = .5, color = \"blue\") +\n    #stat_summary(fun = mean, geom = \"crossbar\",  size = .5, color = \"darkgray\") +\n    geom_hline(yintercept = c(0.01, 0.05, 0.10), linetype = \"dashed\", color = \"gray\") +\n    theme_minimal(base_size = 17) +\n    ggtitle(glue(\"Type I Error Calibration {semilla} {post_titulo}\")) +\n    xlab(\"significance\") + ylab(\"false positive rate\")\n\n  pp\n}\n```\n:::\n\n\n\n### NEED DEBUG simulate $Y = Sigma^{1/2}\\epsilon$ and run assoc with expr_mat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnsam=nrow(grm_mat)\n#ind=1:nsam\nind=1:1000\ntest_mat = grm_mat[ind,ind]\nnsam=nrow(test_mat)\nSigma = test_mat * h2 + (1 - h2) * diag(rep(1,nsam))\nSig_eigen = eigen(Sigma)\nrownames(Sig_eigen$vectors) = rownames(Sigma)\n##sighalf = Sig_eigen$vectors %*% diag( sqrt(  Sig_eigen$values  ) ) %*% t(Sig_eigen$vectors)\n## make this multiplication more efficient using sweep\nsighalf = Sig_eigen$vectors %*% sweep(t(Sig_eigen$vectors),1,sqrt(  Sig_eigen$values ),\"*\")\n\nsim_sigma_pheno = sighalf %*% matrix(rnorm(nsam * nsim), nsam, nsim) \nsim_sigma_pheno=cbind(FID=rownames(sim_sigma_pheno),IID=rownames(sim_sigma_pheno),as.data.frame(sim_sigma_pheno))\n\n\ntic=Sys.time()\ntempres_sigma_pheno <- lmmGRM(sim_sigma_pheno,grm_mat, h2,pred_expr,pheno_id_col=1, pheno_value_cols=2+(1:nsim))\ntoc=Sys.time()\ntoc - tic\npp<-myplot(tempres_sigma_pheno,post_titulo = glue(\"sigma_pheno n= {nsam} - ii={ii}\"))\ncat(ii,\"\\n\")\nprint(pp)\n```\n:::\n\n\n## read gene annotation\n\n::: {.cell}\n\n```{.r .cell-code}\n#gene_annotation <- readRDS(glue(\"{INPUT}/data/expression/gene_annotation.RDS\"))\ngene_annotation <- readRDS(glue(\"{WEBDATA}/2023-11-27-ratxcan-tutorial/data/expression/gene_annotation.RDS\"))\n```\n:::\n\n\n## read predicted expression\n\n::: {.cell}\n\n```{.r .cell-code}\nread_pred_expr = function(filename)\n{\n  ##usage: Br_pred_expr = read_pred_expr(glue(\"{OUTPUT}/Br-hki-rat6k__predict.txt\"))\n  pred_expr <- vroom::vroom(filename) %>% \n  select(-FID) %>%  # Remove the FID column\n  mutate(IID = str_split(IID, \"_\", simplify = TRUE)[, 1])  # Keep the first part of IID\n  pred_expr\n}\n\n# pred_expr = read_pred_expr(glue(\"{OUTPUT}/Br-hki-rat6k__predict.txt\"))\n# ## WHYYYY br-hki-rat6k__predict.txt has no chr 1????\n# df1= tibble(gene=names(pred_expr)) %>% mutate(isinac=TRUE) %>% left_join(gene_annotation,by=c(\"gene\"=\"gene_id\")) \n# df1 %>% count(chr)\n# cat(\"{OUTPUT}/Br_rat6k__predict.txt has no chr 1 genes!!! Where did I lose them?\\n\")\n\npred_expr = read_pred_expr(glue(\"{OUTPUT}/AC-filtered__predict.txt\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 5628 Columns: 5881\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr    (2): FID, IID\ndbl (5879): ENSRNOG00000015552, ENSRNOG00000016054, ENSRNOG00000049505, ENSR...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n## checked that I have chr1 genes\ndf1= tibble(gene=names(pred_expr)[-1]) %>% mutate(isinac=TRUE) %>% left_join(gene_annotation,by=c(\"gene\"=\"gene_id\")) \ndf1 %>% count(chr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   chr       n\n   <chr> <int>\n 1 1       748\n 2 10      542\n 3 11      166\n 4 12      186\n 5 13      190\n 6 14      228\n 7 15      177\n 8 16      177\n 9 17      127\n10 18      171\n11 19      187\n12 2       396\n13 20      203\n14 3       452\n15 4       344\n16 5       387\n17 6       267\n18 7       394\n19 8       312\n20 9       225\n```\n:::\n\n```{.r .cell-code}\ncat(\"{OUTPUT}/AC-filtered__predict.txt has genes in \",length(unique(df1$chr)), \"chr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{OUTPUT}/AC-filtered__predict.txt has genes in  20 chr\n```\n:::\n:::\n\n\n## define function lmm with GRM\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## HERE WE USE THE FULL GRM MATRIX AND CALCULATE THE INVERSE OF THE SIGMA MATRIX\n## define lmm association function \nlmmGRM = function(pheno, grm_mat, h2, pred_expr,pheno_id_col=1,pheno_value_cols=6:6,out=NULL)\n{\n  ## input pheno is a data frame with id column pheno_id_col=1 by default\n  ## phenotype values are in pheno_value_cols, 6:6 by default (SCORE column location in plink output), it can have more than one phenotype\n  ## but h2 has to be the same, this is useful when running simulations with different h2\n  ## call lmmXcan(pheno %>% select(IID,SCORE))\n  \n  ## format pheno to matrix form\n  phenomat <- as.matrix(pheno[,pheno_value_cols])\n  rownames(phenomat) <- pheno[[pheno_id_col]]\n  \n  ## turn pred_expr into matrix with rownames =IID, keep only IIDs in ymat\n  exp_mat = as.matrix(pred_expr %>% select(-IID))\n  rownames(exp_mat) = pred_expr$IID\n\n  ## align pheno and expr matrices\n  idlist = intersect(rownames(phenomat), rownames(exp_mat))\n  \n  nsam = length(idlist)\n  \n  ## CALCULATE SIGMA\n  ID_mat = diag(rep(1,nsam))\n  \n  #testing_scale_grm = TRUE\n  #if(testing_scale_grm) grm_mat = sweep( sweep(grm_mat,2, 1/sqrt(diag(grm_mat)),\"*\"), 1, 1/sqrt(diag(grm_mat)),\"*\")    \n  \n  Sigma = grm_mat[idlist,idlist] * h2 + (1 - h2) * ID_mat\n  \n  Sig_eigen = eigen(Sigma)\n  rownames(Sig_eigen$vectors) = rownames(Sigma)\n  \n  isighalf = Sig_eigen$vectors %*% diag( 1 / sqrt(  Sig_eigen$values  ) ) %*% t(Sig_eigen$vectors)\n  \n  ## perform raw association\n  cormat_raw = matrix_lm(phenomat[idlist,, drop = FALSE], exp_mat[idlist,])\n  pmat_raw = cor2pval(cormat_raw,nsam)\n  colnames(pmat_raw) <- gsub(\"cor_\", \"pval_\", colnames(pmat_raw))\n  \n  ## perform corrected association\n  cormat_correct = matrix_lm(isighalf%*% phenomat[idlist,, drop = FALSE], isighalf %*% exp_mat[idlist,])\n  pmat_correct = cor2pval(cormat_correct,nsam)\n  colnames(pmat_correct) <- gsub(\"cor_\", \"pval_\", colnames(pmat_correct))\n  \n  if(!is.null(out))\n  {\n    saveRDS(cormat_correct,file = glue(\"{out}_cormat_correct.RDS\"))\n    saveRDS(pmat_correct,  file = glue(\"{out}_pmat_correct.RDS\"))\n    saveRDS(cormat_raw,    file = glue(\"{out}_cormat_raw.RDS\"))\n    saveRDS(pmat_raw,      file = glue(\"{out}_pmat_raw.RDS\"))\n  }\n  res = list(\n    cormat_correct=cormat_correct, \n    pmat_correct=pmat_correct, \n    cormat_raw=cormat_raw, \n    pmat_raw=pmat_raw)\n  res\n  \n}\n```\n:::\n\n\n## run ratXcan\n\n::: {.cell}\n\n```{.r .cell-code}\n## read simulated Y\npheno = read_table(glue(\"{WEBDATA}/2023-11-27-ratxcan-tutorial/scratch/sim/tempo/PRS_output_100-32240.profile\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  FID = col_character(),\n  IID = col_character(),\n  PHENO = col_double(),\n  CNT = col_double(),\n  CNT2 = col_double(),\n  SCORE = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\n## calculate h2 of pheno\n## mpheno 4 means fourth column after FID and IID\n## $GCTA --grm $OUTPUT/rat6k_autosome --reml --pheno $OUTPUT/sim/tempo/PRS_output_100-32240.profile --mpheno 4 --out $OUTPUT/test-2024-08-29\n\n## create phenotype with h2\nh2=0.5\npheno$trait = (pheno$SCORE - mean(pheno$SCORE))/sd(pheno$SCORE) * sqrt(h2) + sqrt(1 - h2)*rnorm(nrow(pheno))\n\nif(recalc)\n{res = lmmGRM(pheno, grm_mat, h2, pred_expr,pheno_id_col=1,pheno_value_cols=7:7,out=NULL)\nsaveRDS(res,glue(\"{OUT_TEMPO}/ratxcan-ac-res.RDS\"))\n} else\n  res = readRDS(glue(\"{OUT_TEMPO}/ratxcan-ac-res.RDS\"))\n```\n:::\n\n\n## calc GRM without chr 1\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$PLINK --bfile $GENO/rat6k_autosome --chr 1 --write-snplist --out $OUT_TEMPO/chr1_snps\n\n$GCTA --bfile $GENO/rat6k_autosome --exclude $OUT_TEMPO/chr1_snps.snplist --make-grm-bin --out $OUT_TEMPO/rat6k_autosome_loco_chr01 --thread-num 8\n## that took \n\n```\n:::\n\n::: {.cell}\n\n```{.text .cell-code}\n*******************************************************************\n* Genome-wide Complex Trait Analysis (GCTA)\n* version v1.94.1 Mac\n* (C) 2010-present, Yang Lab, Westlake University\n* Please report bugs to Jian Yang <jian.yang@westlake.edu.cn>\n*******************************************************************\nAnalysis started at 16:52:27 CDT on Thu Aug 29 2024.\nHostname: MED-ML-464.local\n\nAccepted options:\n--bfile /Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/data/genotype//rat6k_autosome\n--exclude /Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/testing-2024-08-29/chr1_snps.snplist\n--make-grm-bin\n--out /Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/rat6k_autosome_loco_chr1\n--thread-num 8\n\nNote: the program will be running on 8 threads.\n\nReading PLINK FAM file from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/data/genotype//rat6k_autosome.fam].\n5628 individuals to be included from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/data/genotype//rat6k_autosome.fam].\nReading PLINK BIM file from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/data/genotype//rat6k_autosome.bim].\n179895 SNPs to be included from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/data/genotype//rat6k_autosome.bim].\nReading a list of SNPs from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/testing-2024-08-29/chr1_snps.snplist].\n17602 SNPs are excluded from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/testing-2024-08-29/chr1_snps.snplist] and there are 162293 SNPs remaining.\nReading PLINK BED file from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/data/genotype//rat6k_autosome.bed] in SNP-major format ...\nGenotype data for 5628 individuals and 162293 SNPs to be included from [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/data/genotype//rat6k_autosome.bed].\nCalculating allele frequencies ...\nRecoding genotypes (individual major mode) ...\n\nCalculating the genetic relationship matrix (GRM) ... (Note: default speed-optimized mode, may use huge RAM)\n\nSummary of the GRM:\nMean of diagonals = 0.990807\nVariance of diagonals = 0.00404564\nMean of off-diagonals = -0.000176097\nVariance of off-diagonals = 0.00216189\nGRM of 5628 individuals has been saved in the file [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/rat6k_autosome_loco_chr1.grm.bin] (in binary format).\nNumber of SNPs to calculate the genetic relationship between each pair of individuals has been saved in the file [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/rat6k_autosome_loco_chr1.grm.N.bin] (in binary format).\nIDs for the GRM file [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/rat6k_autosome_loco_chr1.grm.bin] have been saved in the file [/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial/scratch/rat6k_autosome_loco_chr1.grm.id].\n\n```\n:::\n\n\n## compute GRM loco chr01 and lmmGRM with updated h2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrm_mat_no_chr01 = read_GRMBin(glue(\"{OUT_TEMPO}/rat6k_autosome_loco_chr01.grm\"))\n\n\n## need to recalculate h2\n# $GCTA --reml --grm $OUT_TEMPO/rat6k_autosome  --out $OUT_TEMPO/rat6k_autosome_loco_chr01 --thread-num 8\n\n## save the phenotype with error added\nwrite_tsv(pheno %>% select(IID, FID, trait),file=glue(\"{OUT_TEMPO}/pheno_PRS_output_100-32240.txt\"))\n\n# $GCTA --grm $OUT_TEMPO/rat6k_autosome_loco_chr01 --reml --pheno $OUT_TEMPO/pheno_PRS_output_100-32240.txt --mpheno 1 --out $OUT_TEMPO/loco_chr01 --thread-num 8\n\nh2_loco_chr01 = read_tsv(glue(\"{OUT_TEMPO}/loco_chr01.hsq\")) %>% filter(Source==\"V(G)/Vp\") %>% pull(Variance)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 10 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): Source\ndbl (2): Variance, SE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nif(recalc)\n{\n  res_no_chr01 = lmmGRM(pheno, grm_mat_no_chr01, h2= h2_loco_chr01, pred_expr,pheno_id_col=1,pheno_value_cols=7:7,out=NULL)\n  saveRDS(res_no_chr01,file=glue(\"{OUT_TEMPO}/ratxcan-ac-res-loco-chr01.RDS\"))\n} else res_no_chr01=readRDS(glue(\"{OUT_TEMPO}/ratxcan-ac-res-loco-chr01.RDS\"))\n```\n:::\n\n\n## compare pvalues in chr 1 vs other chromosomes\n\n::: {.cell}\n\n```{.r .cell-code}\npmat2df = function(pmat)\n{\n  df = data.frame(pmat)\n  df$gene = rownames(pmat)\n  rownames(df) = NULL\n  df %>% left_join(gene_annotation %>% select(gene_id,chr,gene_name),by=c(\"gene\"=\"gene_id\") )\n}\n\ndf_loco_chr01 = pmat2df(res_no_chr01$pmat_correct) \ndf = pmat2df(res$pmat_correct) \n\npar(mfrow=c(2,2))\nhist(df_loco_chr01 %>% filter(chr==\"1\") %>% pull(trait),main=\"ratxcan GRM no chr1 - genes in chr1\")\nhist(df_loco_chr01 %>% filter(chr!=\"1\") %>% pull(trait),main=\"ratxcan GRM no chr1 - genes chr!=1\")\nhist(df %>% filter(chr==\"1\") %>% pull(trait),main=\"ratxcan GRM all - genes in chr1\")\nhist(df %>% filter(chr!=\"1\") %>% pull(trait),main=\"ratxcan GRM all - genes chr!=1\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/compare pvalues in chr 1 vs other chromosomes-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1,1))\n\npar(mfrow=c(2,2))\nrango = range(-log10(c(df_loco_chr01$trait, df$trait)))\nqqunif(df_loco_chr01 %>% filter(chr==\"1\") %>% pull(trait),main=\"ratxcan GRM no chr1 - genes in chr1\",BH=FALSE,CI=FALSE,xlim=rango,ylim=rango)\nqqunif(df_loco_chr01 %>% filter(chr!=\"1\") %>% pull(trait),main=\"ratxcan GRM no chr1 - genes chr!=1\",BH=FALSE,CI=FALSE,xlim=rango,ylim=rango)\nqqunif(df %>% filter(chr==\"1\") %>% pull(trait),main=\"ratxcan genes in chr1\",BH=FALSE,CI=FALSE,xlim=rango,ylim=rango)\nqqunif(df %>% filter(chr!=\"1\") %>% pull(trait),main=\"ratxcan genes chr!=1\",BH=FALSE,CI=FALSE,xlim=rango,ylim=rango)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/compare pvalues in chr 1 vs other chromosomes-2.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1,1))\n\n\nqqunif(df_loco_chr01 %>% filter(chr==\"1\") %>% pull(trait),main=\"ratxcan GRM no chr1 - genes in chr1\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/compare pvalues in chr 1 vs other chromosomes-3.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-warning}\n## Take home\nremoving chr1 from GRM negates the correction of ratxcan in chr1.\n:::\n\n> phenotype was simulated to have a relatedness modeling random effect (covariance=GRM), no conexion to any of the genes. Any significant association should be considered false positive.\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}