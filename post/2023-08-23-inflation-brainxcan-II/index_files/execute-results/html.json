{
  "hash": "5c26b63e079394185d349e1c285f519f",
  "result": {
    "markdown": "---\ntitle: \"Polygenicity Driven Inflation in Brainxcan II\"\nauthor: \"Haky Im\"\ndate: \"2023-08-23\"\ncategories: [analysis]\ndate-modified: last-modified\neditor_options: \n  chunk_output_type: console\nformat:\n  html:\n    code-fold: false\n    code-summary: \"Show the code\"\n    code-tools: true\n    code-overflow: wrap\ndescription: to investigate the functional form of var(Z_TWAS)(N, h_Y, M)\n---\n\n\n\nInvestigate this expression\n$\\text{Var}(Z_\\text{bxcan}) = 1 + h_Y^2 \\cdot N \\cdot \\Phi(\\cdots)$\n\nHow does $\\Phi$ relate to the traces expression?\n$$\\Phi \\longleftrightarrow \\frac{\\text{tr}(R'R)}{\\text{tr}^2(R)}$$\nThe model for Y and IDPs\n\n$$Y = T ~ \\beta + X \\cdot b + \\epsilon_Y$$\n$$T = X \\cdot \\gamma$$\nError in prediction will be introduced as error in $\\gamma$ later\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(glue))\n\nPRE = \"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\nSLUG=\"inflation-brainxcan-II\" ## copy the slug from the header\nbDATE='2023-08-23' ## copy the date from the blog's header here\nDATA = glue(\"{PRE}/{bDATE}-{SLUG}\")\nif(!file.exists(DATA)) system(glue::glue(\"mkdir {DATA}\"))\nWORK=DATA\n##system(glue(\"open {DATA}\")) ## this will open the folder \n```\n:::\n\n\n## copied simulation code from [previous post on polygenicity driven inflation in brainxcan](/post/2023-04-07-inflation-brainxcan)\n\n## load and define Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(devtools::source_gist(\"115403f16bec0a0e871f3616d552ce9b\") ) ## load fn_ratxcan, fast regression and other convenience functions to correlate subsets of columns of two matrices\nsuppressMessages(devtools::source_gist(\"38431b74c6c0bf90c12f\") ) ## load qqunif\n\n\nmy_trace = function(mat) if(nrow(mat)==ncol(mat)) sum(diag(mat)) else error(\"matrix is not diagonal\")\nqqR2 <- function(corvec,nn,pad_neg_with_0 = FALSE,...)\n{\n## nn is the sample size, number of individuals used to compute correlation.\n## needs correlation vector as input.\n## nullcorvec generates a random sample from correlation distributions, under the null hypothesis of 0 correlation using Fisher's approximation.\n  if(pad_neg_with_0) corvec[corvec < 0 | is.na(corvec) ]=0\n  mm <- length(corvec)\n  nullcorvec = tanh(rnorm(mm)/sqrt(nn-3)) ## null correlation vector\n  qqplot(nullcorvec^2,corvec^2,...); abline(0,1); grid()\n}\n\nqqR <- function(corvec,nn,...)\n{\n## nn is the sample size, number of individuals used to compute correlation.\n## needs correlation vector as input.\n## nullcorvec generates a random sample from correlation distributions, under the null hypothesis of 0 correlation using Fisher's approximation.\n  mm <- length(corvec)\n  nullcorvec = tanh(rnorm(mm)/sqrt(nn-3)) ## null correlation vector\n  qqplot(nullcorvec,corvec,...); abline(0,1); grid()\n}\n\n## calculate p-value from correlation\ncor2zscore = function(cc,nn) \n{\n  zz = atanh(cc) * sqrt(nn-3)\n}\n\ncor2pval = function(cc,nn) \n{\n  zz=cor2zscore(cc,nn)\n  pnorm(-abs(zz))*2\n}\n\ncor2chi2 = function(cc,nn)\n{\n  cor2zscore(cc,nn)^2\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate_study = function(nsam,msnp,nsim,midp,precision_gamma,h2Y,prop_causal)\n{\n  ## simulate Xmat (nsam x msnp)\n  Xmat = matrix(rbinom(nsam*msnp, 2, 0.4), nsam, msnp)\n\n  ## calculate GRM or LD matrix depending on min(nsam, msnp) and trrtr\n  R = scale(Xmat) ## QUESTION: DO I NEED TO SCALE ACROSS SAMPLES AND ACROSS SNPS?\n  if(nsam >  msnp) \n  {\n    R = t(R)\n    MM = nsam\n  } else MM = msnp\n  R = ( R %*% t(R) ) / MM\n  trrtr = my_trace( t(R) %*% R ) / my_trace(R)^2\n  \n  ## simulate IDPmat (nsam x mipd) \n  gammamat = matrix(rnorm(msnp * midp),msnp, midp)\n  is_causal = rbinom(msnp,1,prop_causal)\n  gammamat = sweep(gammamat,MARGIN=1,is_causal,FUN=\"*\")\n  gIDPmat = Xmat %*% gammamat\n  gIDPmat = scale(gIDPmat) \n  gIDPmat = sweep(gIDPmat, MARGIN=2, sqrt(precision_gamma), FUN=\"*\" )\n  \n  egammamat = matrix(rnorm(msnp * midp),msnp, midp)\n  eIDPmat = Xmat %*% egammamat\n  eIDPmat = scale(eIDPmat) \n  eIDPmat = sweep(eIDPmat, MARGIN=2, sqrt(1 - precision_gamma), FUN=\"*\" )\n\n  IDPmat = gIDPmat + eIDPmat\n  \n  ## simulate Ymat (nsam x nsim) indep of IDPs\n  betamat = matrix(rnorm(msnp*nsim),msnp, nsim)\n  epsimat = matrix(rnorm(nsam*nsim),nsam, nsim)\n  epsimat = scale(epsimat) * sqrt(1 - h2Y)\n  gYmat = Xmat %*% betamat\n  gYmat = scale(gYmat) * sqrt(h2Y)\n  Ymat = gYmat + epsimat\n  \n  ## calc cor\n    ## scale Ymat & IDPmat\n  Ymat = scale(Ymat)\n  IDPmat = scale(IDPmat)\n    ## multiply t(Ymat) %*% IDPmat\n  cormat = t(Ymat) %*% IDPmat\n  cormat = cormat / nsam\n\n  ## calc varZ\n  chi2mat = cor2chi2(cormat,nn=nsam)\n  varZ = apply(chi2mat,2,mean)\n\n  ## build result list\n  res = list()\n  res$varZ = varZ\n  res$trrtr = trrtr\n  res\n}\n```\n:::\n\n\n## define parameters for simulation multiple comb of nsam and msnp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnsim = 1000\nmidp = 99\nprecision_gamma = 0.1 + 0.8 * (1:midp)/midp\nh2Yvec = (1:9)/10; num_h2Y = length(h2Yvec)\nnsamlist = c(100,1000,2000,3000,5000,6000,7000,8000,10000); num_nsam=length(nsamlist)\nmsnplist = c(99,499,999,1999, 2999,3999,4999); num_msnp=length(msnplist)\nprop_causal=1\n```\n:::\n\n\n## simulate and plot varZ vs precision_gamma by h2Y, msnp, nsam\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrerun=FALSE\nif(rerun)\n{\n  varZarray = array(NA, dim=c(num_h2Y,num_nsam, num_msnp, midp))\n  trrtrarray = array(NA,dim=c(num_h2Y,num_nsam, num_msnp))\n  for(hh in 1:num_h2Y)\n  {\n    h2Y = h2Yvec[hh]\n    print(\"---------------\")\n    print(\"h2Y is\")\n    print(h2Y)\n    \n    # varZmat = array(NA, dim=c(num_nsam, num_msnp, midp) )\n    # trrtrarray = matrix(NA,num_nsam, num_msnp)\n    \n    for(ii in 1:num_nsam)\n    {\n      for(jj in 1:num_msnp)\n      {\n        res=list()\n        #print(ii)\n        #print(jj)\n        nsam=nsamlist[ii]\n        msnp=msnplist[jj]\n        #print(nsam)\n        #print(msnp)\n        noskip = !(msnp==4999 & nsam > 4999)\n        if(noskip) \n        {\n          res = simulate_study(nsam,msnp,nsim,midp,precision_gamma,h2Y,prop_causal)\n          varZarray[hh,ii,jj,] = res$varZ\n          trrtrarray[hh,ii,jj] = res$trrtr\n        }\n      }\n    }\n#    saveRDS(varZmat,glue(\"{DATA}/varZmat-h2Y{h2Y}-propcausal{prop_causal}.RDS\"))\n#    saveRDS(trrtrmat,glue(\"{DATA}/trrtrmat-h2Y{h2Y}-propcausal{prop_causal}.RDS\"))\n\n    charnsamlist = paste0(\"n_\",nsamlist)\n    charmsnplist = paste0(\"m_\",msnplist)\n    charh2vec = paste0(\"h2Y_\",h2Yvec)\n    dimnames(trrtrarray) = list(charh2vec, charnsamlist,charmsnplist)\n    dimnames(varZarray) = list(charh2vec, charnsamlist,charmsnplist,\n                             paste0(\"prec_\",round(precision_gamma,4)))\n\n  saveRDS(varZarray,glue(\"{DATA}/varZarray-propcausal{prop_causal}.RDS\"))\n  saveRDS(trrtrarray,glue(\"{DATA}/trrtrarray-propcausal{prop_causal}.RDS\"))\n    \n    \n      }\n  \n    charnsamlist = paste0(\"n_\",nsamlist)\n    charmsnplist = paste0(\"m_\",msnplist)\n    charh2vec = paste0(\"h2Y_\",h2Yvec)\n    dimnames(trrtrarray) = list(charh2vec, charnsamlist,charmsnplist)\n    dimnames(varZarray) = list(charh2vec, charnsamlist,charmsnplist,\n                             paste0(\"prec_\",round(precision_gamma,4)))\n\n  saveRDS(varZarray,glue(\"{DATA}/varZarray-propcausal{prop_causal}.RDS\"))\n  saveRDS(trrtrarray,glue(\"{DATA}/trrtrarray-propcausal{prop_causal}.RDS\"))\n  \n  \n} else\n{\n  # varZarray = readRDS(glue(\"{DATA}/varZarray-propcausal{prop_causal}.RDS\"))\n  # trrtrarray = readRDS(glue(\"{DATA}/trrtrarray-propcausal{prop_causal}.RDS\"))\n  varZarray = readRDS(glue(\"{DATA}/saved-varZarray-nsim-1000-propcausal1.RDS\"))\n  trrtrarray = readRDS(glue(\"{DATA}/saved-trrtrarray-nsim-1000-propcausal1.RDS\"))\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvarZdf = reshape2::melt(varZarray)\nvarZdf$Var1 = as.character(varZdf$Var1)\nvarZdf$Var2 = as.character(varZdf$Var2)\nvarZdf$Var3 = as.character(varZdf$Var3)\nvarZdf$Var4 = as.character(varZdf$Var4)\n## check random subset that the melted df has the same values as the array\nrrlist = sample(1:nrow(varZdf),1000)\nfor(rr in rrlist)\n{\n  if(!is.na(varZdf$value[rr]))\n  {char_h2Y = varZdf$Var1[rr]\n  char_nsam = varZdf$Var2[rr]\n  char_msnp = varZdf$Var3[rr]\n  char_prec = varZdf$Var4[rr]\n  if( varZdf$value[rr]!= varZarray[char_h2Y,char_nsam,char_msnp,char_prec]\n      ) \n  {print('Error in row ');print(rr)}\n  }\n}\n## extract numbers from the names of dim array\nvarZdf = \n  varZdf %>%\n  mutate(\n    h2Y = as.numeric(str_extract(Var1, \"(?<=h2Y_)[\\\\d\\\\.]+\")),\n    nsam = as.numeric(str_extract(Var2, \"(?<=n_)[\\\\d\\\\.]+\")),\n    msnp = as.numeric(str_extract(Var3, \"(?<=m_)[\\\\d\\\\.]+\")),\n    prec = as.numeric(str_extract(Var4, \"(?<=prec_)[\\\\d\\\\.]+\"))\n  ) %>% rename(varZ = value)\n## remove missing\nprint(dim(varZdf))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 56133     9\n```\n:::\n\n```{.r .cell-code}\nvarZdf = na.omit(varZdf)\nprint(dim(varZdf))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 51678     9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTRdf = reshape2::melt(trrtrarray)\nTRdf$Var1 = as.character(TRdf$Var1)\nTRdf$Var2 = as.character(TRdf$Var2)\nTRdf$Var3 = as.character(TRdf$Var3)\nTRdf = \n  TRdf %>%\n  mutate(\n    h2Y = as.numeric(str_extract(Var1, \"(?<=h2Y_)[\\\\d\\\\.]+\")),\n    nsam = as.numeric(str_extract(Var2, \"(?<=n_)[\\\\d\\\\.]+\")),\n    msnp = as.numeric(str_extract(Var3, \"(?<=m_)[\\\\d\\\\.]+\")),\n  ) %>% rename(trrtr = value)\n## remove missing\nprint(dim(TRdf))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 567   7\n```\n:::\n\n```{.r .cell-code}\nTRdf = na.omit(TRdf)\nprint(dim(TRdf))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 522   7\n```\n:::\n\n```{.r .cell-code}\nTRdf %>% ggplot(aes(nsam,(trrtr - 1/msnp)*nsam)) + geom_point() + geom_hline(yintercept=1,col='gray') + ggtitle( \"( trrtr - 1/M )*nsam\" )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/trrtr dependence on M and N-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##Numeric \"experiments\" indicate that trrtr \\approx 1/N + 1/M\nwith(TRdf, summary(lm( trrtr ~ I(1/msnp) + I(1/nsam) ) ) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = trrtr ~ I(1/msnp) + I(1/nsam))\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-3.000e-04 -2.480e-06 -6.300e-07  1.640e-06  3.264e-04 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(>|t|)    \n(Intercept) 8.262e-08  1.518e-06    0.054    0.957    \nI(1/msnp)   9.985e-01  3.440e-04 2902.829   <2e-16 ***\nI(1/nsam)   1.008e+00  3.735e-04 2699.414   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.696e-05 on 519 degrees of freedom\nMultiple R-squared:      1,\tAdjusted R-squared:      1 \nF-statistic: 7.703e+06 on 2 and 519 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nwith(TRdf, plot(1/msnp + 1/nsam,trrtr ) ) \nabline(0,1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/guessing the functional form of trrtr-1.png){width=672}\n:::\n\n```{.r .cell-code}\nTRdf %>% ggplot(aes(1/msnp + 1/nsam,trrtr ,col=Var3) ) + geom_point() + geom_abline() + ggtitle(\"trrtr = 1/M + 1/N\") + theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/guessing the functional form of trrtr-2.png){width=672}\n:::\n\n```{.r .cell-code}\nTRdf %>% ggplot(aes(1/msnp + 1/nsam,trrtr ,col=Var2) ) + geom_point() + geom_abline() + ggtitle(\"trrtr = 1/M + 1/N\") + theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/guessing the functional form of trrtr-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## compare varZ with 1 + h2 N / M\nwith(varZdf, summary(lm( varZ ~ I(1 + h2Y * nsam / msnp) ) ) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = varZ ~ I(1 + h2Y * nsam/msnp))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.4220 -0.0652  0.0101  0.0791 11.5993 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)            -0.0403504  0.0031788  -12.69   <2e-16 ***\nI(1 + h2Y * nsam/msnp)  1.0125590  0.0002367 4277.43   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6421 on 51676 degrees of freedom\nMultiple R-squared:  0.9972,\tAdjusted R-squared:  0.9972 \nF-statistic: 1.83e+07 on 1 and 51676 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nvarZdf %>%\n  ggplot(aes(x = 1 + h2Y * nsam / msnp, y = varZ)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color = \"gray\") + \n  theme_bw() + \n  ggtitle(\"varZ approx. 1 + h2Y * nsam / msnp\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## other plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvarZdf %>%\n  filter(nsam > 999) %>%\n  ggplot(aes(x = Var1, y = (varZ - 1) / h2Y / nsam * msnp)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 1, color = 'gray', linetype = 3) +\n  labs(title = \"(varZ - 1)*M/N/h2Y vs h2Y\", x = \"h2Y\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nvarZdf %>%\n  filter(nsam > 999) %>%\n  ggplot(aes(x = prec, y = (varZ - 1) / h2Y / nsam * msnp)) +\n  geom_point() + geom_smooth() +\n  geom_hline(yintercept = 1, color = 'gray', linetype = 3) +\n  labs(title = \"(varZ - 1)*M/N/h2Y vs h2Y\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfor(nn in nsamlist)\n{\n  pp <- varZdf %>%\n    filter(nsam == nn) %>%\n    ggplot(aes(x = prec, y = (varZ - 1) / h2Y / nsam * msnp)) +\n    geom_point() + geom_smooth() +\n    geom_hline(yintercept = 1, color = 'green') +\n    labs(title = glue(\"(varZ - 1)*M/N/h2Y vs h2Y - nsam={nn}\" ) )+\n    theme(legend.position = \"none\")\n  print(pp)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-6.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-7.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-8.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-9.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-10.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-11.png){width=672}\n:::\n\n```{.r .cell-code}\nvarZdf %>% \n  filter(nsam >= 1000) %>% \n  mutate(phi=(varZ - 1)/h2Y/nsam*msnp ) %>% \n  group_by(h2Y,nsam,msnp) %>% \n  summarize(mean=mean(phi),sd=sd(phi),median=median(phi), .groups = \"drop\" ) %>% \n  ggplot(aes(h2Y, mean,col=as.factor(nsam))) + \n  geom_point() +\n  labs(title = \"mean (varZ - 1)*M/N/h2Y vs h2Y\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-12.png){width=672}\n:::\n\n```{.r .cell-code}\nvarZdf %>% \n  filter(nsam >= 1000) %>% \n  mutate(phi=(varZ - 1)/h2Y/nsam*msnp ) %>% \n  group_by(h2Y,nsam,msnp) %>% \n  summarize(mean=mean(phi),sd=sd(phi),median=median(phi), .groups = \"drop\" ) %>% \n  ggplot(aes(nsam, mean,col=as.factor(msnp))) + \n  geom_point() +\n  labs(title = \"mean (varZ - 1)*M/N/h2Y vs nsam\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-13.png){width=672}\n:::\n\n```{.r .cell-code}\nvarZdf %>% \n  filter(nsam >= 1000) %>% \n  mutate(phi=(varZ - 1)/h2Y/nsam*msnp ) %>% \n  group_by(h2Y,nsam,msnp) %>% \n  summarize(mean=mean(phi),sd=sd(phi),median=median(phi), .groups = \"drop\" ) %>% \n  ggplot(aes(msnp, mean,col=as.factor(nsam))) + \n  geom_point() +\n  labs(title = \"mean (varZ - 1)*M/N/h2Y vs msnp\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/other plots-14.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}